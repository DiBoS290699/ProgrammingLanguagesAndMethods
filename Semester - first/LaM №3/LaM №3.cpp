#include <iostream>
#include <string>
#include <vector>
#include <algorithm>            //необходим для использования функции swap (), sort ()
#include <time.h>               //необходим для подсчёта времени
using namespace std;            //подключение библиотек

////////////////ВВОД РАЗМЕРА ВЕКТОРА////////////////
int vector_size(int x) {
	while (!(cin >> x) || (cin.peek() != '\n')) {
		cin.clear();
		while (cin.get() != '\n') {}
		cout << "Не корректно введено целое число, введите его заново> ";
	}
	return x;
}
//--------------------------------------------------------------------

////////////////ЗАПОЛНЕНИЕ ВЕКТОРА РАНДОМНЫМИ ЧИСЛАМИ////////////////
void g_vector(vector<int> &v) {
	srand(time(0));                     //для различной генерации рандомных 
	for (int i = 0; i < v.size(); ++i) {	//чисел с каждым запуском.
		v[i] = 1 + rand() % v.size();		//Инициализирует рандомным значением 
	}									//от 1 до количества элементов в векторе
}
//--------------------------------------------------------------------

////////////////ВЫБИРАЕТСЯ МЕТОД ЗАПОЛНЕНИЯ ВЕКТОРА////////////////
void vector_filling(int x, vector<int>& v) {
	char k_g_r;
	while (cin >> k_g_r) {
		if (k_g_r == 'k') {
			int value;
			cout << "Введите целое число в вектор> ";
			for (int i = 0; i < x; ++i) {       //инициализация каждого элемента вектора 
				cin >> value;                   //соответствующим введённым значением
				v[i] = value;
			}
			break;
		}
		else if (k_g_r == 'r') {
			g_vector(v);
			sort(v.rbegin(), v.rend());      //Обратная сортировка с помощью reverse
			break;
		}
		else if (k_g_r == 'g') {
			g_vector(v);
			break;
		}
		else {			//вывод ошибки и просьба ввести символ заново
			cout << "Неправильный символ! Введите его заново> ";
			continue;
		}
	}
}

////////////////ПОДСЧЁТ ВРЕМЕНИ БИБЛИОТЕЧНОЙ СОРТИРОВКИ////////////////
double libr_time(vector<int> &v) {
	double start_time = clock();        //начальное время
	sort(v.begin(), v.end());
	double end_time = clock();          //конечное время
	return end_time - start_time;      // сколько длилась сортировка
}
//--------------------------------------------------------------------

////////////////ПОДСЧЁТ ВРЕМЕНИ ПУЗЫРЧАТОЙ СОРТИРОВКИ////////////////
double bubble_time(vector<int> &v1, int x) {
	double start_time1 = clock(); //начальное время
	for (int i = 0; i < x; ++i) {           //Количество проходов совпадает с количеством элементов в векторе.
		for (int c = x - 1; c != 0; --c) {    //Сначала берётся последний элемент и предыдущий ему,
			if (v1[с] <= v1[c - 1]) {	      //они сравниваются, если элемент меньше или равен
				swap(v1[d], v1[c]);    		 //предыдущему, то меняем их местами
			}
		}
	}
	double end_time1 = clock(); //конечное время
	return end_time1 - start_time1; // сколько длилась сортировка
}
//-------------------------------------------------------------------

////////////////ПОДСЧЁТ ВРЕМЕНИ УСКОРЕННОЙ ПУЗЫРЧАТОЙ СОРТИРОВКИ////////////////
double bubble_time1(vector<int> &v2, int x) {
	double start_time1 = clock(); //начальное время
	for (int i = 0; i < x; ++i) {           //Количество проходов совпадает с количеством элементов в векторе.
		bool count = false;					//Определяет, был ли использован swap в проходе
		for (int c = x - 1; c != 0; --c) {                         
			if (v2[c] <= v2[c-1]) {
				swap(v2[c-1], v2[c]);
				count = true;				
			}
		}
		if (!count) break;				//Если функция swap не использовалась, то вектор отсортирован
	}
	double end_time1 = clock(); //конечное время
	return end_time1 - start_time1; // сколько длилась сортировка
}
//-------------------------------------------------------------

////////////////ВЫВОД НА ЭКРАН ЗНАЧЕНИЙ ВЕКТОРА////////////////
void out_val(vector<int>& v, int x) {
	if (x < 100) {
		for (int i : v) {
			cout << i << ' ';
		}
	}
	else {
		for (int i = 0; i < 100; ++i) {
			cout << v[i] << ' ';
		}
	}
}
//-------------------------------------------------------------

int main() {
	setlocale(LC_CTYPE, "rus");		//функция, позволяющая выводить на экран буквы русского алфавита
	while (cout << "Продолжить? (Да (Y) | Нет (N))\n") {
		string y_n;
		cin >> y_n;

		if (y_n == "Y" || y_n == "y") {
			cout << "Введите размер вектора> ";
			int x = 0;
			x = vector_size(x);			//Проверка на правильность введённого х
			vector<int>v(x);

			cout << "Выберите метод заполнения вектора" << endl
			      << "Клавиатура (k), генерация (g) или <<обратная>> генерация (r)? (k|g|r)> ";
			vector_filling(x, v);		//функция, заполняющая вектор

			vector<int> v1 = v;                         //создание и копирование нового вектора
			vector<int> v2 = v;
			cout << "Старый вектор: ";
			out_val(v, x);                                //вывод значений вектора v

			double l = libr_time(v);                   //время, потраченное на сортировку sort
			double b = bubble_time(v1, x);                //время, потраченное на сортировку bubble
			double b1 = bubble_time1(v2, x);

			cout << endl << "Время библиотечной сортировки = "
				<< l << "\n" << "Отсортированный вектор (sort): ";
			out_val(v, x);                                //вывод значений отсортированного sort-ом вектор v

			cout << endl << "Время пузырчатой сортировки = "
				<< b << "\n" << "Отсортированный вектор (пузырьком): ";
			out_val(v1, x);                               //вывод значений отсортированного пузырьком вектор v

			cout << endl << "Время ускоренной пузырчатой сортировки = "
				<< b1 << "\n" << "Отсортированный вектор (уск. пузырьком): ";
			out_val(v2, x);                               //вывод значений отсортированного пузырьком вектор v
			//-----------------------------------------------------------------------------

			if (l != 0 && b != 0) {
				cout << endl << "отношения сортировки пузырьком к сортировки sort - ом: "
					<< b / l << endl;      //вывод отношения сортировки пузырьком к сортировки sort - ом
			}

			//-----------------------------------------------------------------------------

			else {
				cout << "\n" << "Время одной из сортировок равно нулю! "
					<< "Найти отношение двух сортировок невозможно!\n";
			}
		}

		//-----------------------------------------------------------------------------

		else if (y_n == "N" || y_n == "n") {
			return 0;
		}

		//-----------------------------------------------------------------------------

		else {
			cout << "Неправильный символ!\n";
			continue;
		}
	}
}
